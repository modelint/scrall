// Scrall grammar

// We assume that the input file has been pre-processed to remove
// comments, extraneous end of line space but newlines are left intact
// with a single newline added at the end to simplify our grammar


// Whitespace and delimiters
NEWLINE = '\n' // New line
SPACE = r'[ \t]' // A single whitespace character
_ = SPACE+ // At least one space
__ = SPACE* // Optional space
WDELIM = r'[ _]' // Word delimiter to separate words in a name
// ---

// Names (attribute, class, variable, etc)
ignore_keywords = !" true" !"true " !" false" !"false " !" and" !"and " !" or" !"or " !" not" !"not " !" its" !"its " ! " me" !" me"
word = ignore_keywords r'[A-Za-z][A-Za-z0-9]*' // String of alpahnumeric text with no whitespace starting with alpha char
name = word (WDELIM word)* // Sequence of delimited words forming a name
rnum = r'R[1-9][0-9]*'
// ---

// Assignment operators
SCALAR_ASSIGN = '='
INST_ASSIGN = '.=' / '..='
TABLE_ASSIGN = '#='
// ---

// Math and logic operators
EXP = '^'
INCR = '++' / '--'
MATCH = ':'
EQUAL = '==' / '!='
COMPARE = r'[<>][=]?'
OR = 'or'
AND = 'and'
NOT = '!' / 'not'
UNARY_MINUS = '-'
ADD = r'[+-]'
MULT = r'[*/%]'
SCALAR_ASSIGN = '='
// ---

// Symbols
MIGRATE = '>>'
ACTION_SEP = ';'
LINK = '&'
HIPPITY_HOP = '~|' / '~'
DELETE = '!*'
CREATE = '*'
TYPE_DEC = '::'
ORDER = '+^' / '-^'
CARD = '1' / '*'
DELAY = '@'
SENDTO = '->'
IN = 'in.'
ITS = 'its.'
// ---

// Values
ME = 'me'
TRUE = 'true'
FALSE = 'false'
bool_value = TRUE / FALSE
// ---

// math and boolean operator precedence
scalar_expr = __ logical_or __
logical_or = logical_and (_ OR _ logical_and)*
logical_and = equality (_ AND _ equality)*
equality = comparison (__ EQUAL __ comparison)*
comparison = addition (__ COMPARE __ addition)*
addition = mult (__ ADD __ mult)*
mult = exponent (__ MULT __ exponent)*
exponent = logical_not (EXP logical_not)*
logical_not = (NOT _)? UNARY_MINUS? INCR? term
// term = op_call / name
term = scalar_component ('.' scalar_component)* / '(' __ scalar_expr __ ')'

scalar_component = (inst_set '.')? (op_call / input_param / selector / name )

// Input param
input_param = IN name

// Operation call
type_qual = __ ':' __ name
param = name type_qual?
signature = '(' (__ param __ (',' __ param __)*)? ')'
op_call = name signature
// ---

// path
hop = '/' (name / rnum)
path = hop+
// ---

// Instance selection
value_comparison = ORDER? ITS? name __ (MATCH / EQUAL / COMPARE) __ scalar_expr
attr_order = ORDER name __
attr_criteria = attr_order / value_comparison
restriction = attr_criteria ( __ ',' __ attr_criteria)*
op_card = CARD
criteria = (op_card __ ',' __ restriction) / op_card / restriction
selection = '(' __ criteria? __ ')'
// ---

// Type selector
alpha_numeric_word = r'[a-zA-Z0-9]+'
value_name = alpha_numeric_word (WDELIM name)?
value_selection = '[' __ value_name __ ']'
selector = name value_selection


// ACTIONS
// Scalar assignment action
assign_scalar = name _ SCALAR_ASSIGN _ scalar_expr

// Instance set assignment action
inst_source = path / name
inst_set = ME / inst_source selection?
assign_inst_set = name _ INST_ASSIGN _ inst_set

// Signal action
when = scalar_expr
destination = (__ ':' __) / inst_set __ (DELAY __ when)?
signal = name __ SENDTO __ destination
// ---

action = (assign_scalar / assign_inst_set / signal) NEWLINE
activity = action* EOF
