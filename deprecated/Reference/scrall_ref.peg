// Scrall grammar

// We assume that the input file has been pre-processed to remove
// comments, extraneous end of line space but newlines are left intact
// with a single newline added at the end to simplify our grammar


// Scrall actions
// --
// Here is each action that you can specify in Scrall
//
action = (
    conditional_action /
    iteration /
    migration /
    signal /
    op_call /
    assignment /
    link_action /
    inst_creation /
    inst_deletion
) __ // An action that is not in a line cluster may wrap across multiple lines

// Instance set assignment
assign_inst_set = inst_set_variable __ INST_ASSIGN __ inst_set
inst_set = ME / inst_source selection?
inst_source = op_call / path / inst_creation / class_name / inst_set_variable

ignore_keywords = !" true" !"true " !" false" !"false " !" and" !"and " !" or" !"or " !" not" !"not " !" its" !"its " ! " me" !" me"
nl = '\n' // New line
space = r'[ \t]' // Required at least one space, no newlines
_ = space+
__ = space*
wdelim = r'[ _]' // Word delimiter to separate words in a name
word = ignore_keywords r'[A-Za-z][A-Za-z0-9]*' // String of alpahnumeric text with no whitespace starting with alpha char
name = word (wdelim word)* // Sequence of delimited words forming a name

// Assignment operators
SCALAR_ASSIGN = '='
INST_ASSIGN = '.=' / '..='
TABLE_ASSIGN = '#='

// Math and logic operators
EXP = '^'
INCR = '++' / '--'
MATCH = ':'
EQUAL = '==' / '!='
COMPARE = r'[<>][=]?'
OR = 'or'
AND = 'and'
NOT = '!' / 'not'
UNARY_MINUS = '-'
ADD = r'[+-]'
MULT = r'[*/%]'
SCALAR_ASSIGN = '='

// Symbols
MIGRATE = '>>'
ACTION_SEP = ';'
LINK = '&'
HIPPITY_HOP = '~|' / '~'
DELETE = '!*'
CREATE = '*'
TYPE_DEC = '::'
ORDER = '+^' / '-^'
CARD = '1' / '*'
DELAY = '@'
SENDTO = '->'
IN = 'in.'
ITS = 'its.'

// Shorthand reference to the local instance
ME = 'me'

// Boolean values are the only literal values permitted in Scrall
TRUE = 'true'
FALSE = 'false'
bool_value = TRUE / FALSE

// Math and boolean operator precedence for scalar expressions
scalar_expr = __ logical_or __
logical_or = logical_and (_ OR _ logical_and)*
logical_and = equality (_ AND _ equality)*
equality = comparison (_ EQUAL _ comparison)*
comparison = addition (_ COMPARE _ addition)*
addition = mult (_ ADD _ mult)*
mult = exponent (_ MULT _ exponent)*
exponent = logical_not (EXP logical_not)*
logical_not = (NOT _)? UNARY_MINUS? INCR? term
term = name / bool_value / '(' __ scalar_expr __ ')'

// Assign a scalar expression to some scalar variable name
assign_scalar = name __ SCALAR_ASSIGN __ scalar_expr nl


// Instance selection
value_comparison = ORDER? ITS? name __ (MATCH / EQUAL / COMPARE) __ scalar_expr
attr_order = ORDER name __
attr_criteria = attr_order / value_comparison
restriction = attr_criteria ( __ ',' __ attr_criteria)*
op_card = CARD
criteria = (op_card __ ',' __ restriction) / op_card / restriction
selection = '(' __ criteria? __ ')'

// Instance set is either the local instance or an instance set filtered by optional selection criteria
inst_set = ME / name selection?

// Assign an instance set to an instance variable
assign_inst_set = inst_set_variable __ INST_ASSIGN __ inst_set

action = assign_scalar / assign_inst_set
activity = action* EOF
